"""
Signal data model for trading alerts.
"""

from dataclasses import dataclass
from datetime import datetime
from typing import Optional


@dataclass
class Signal:
    """
    Represents a trading signal generated by technical analysis.
    
    Attributes:
        symbol: The forex symbol (e.g., "EURUSD")
        signal_type: Type of signal ("BUY" or "SELL")
        price: Current price when signal was generated
        timestamp: When the signal was generated
        zlma_value: Zero-Lag Moving Average value at signal time
        ema_value: Exponential Moving Average value at signal time
        confidence: Signal confidence level (0.0 to 1.0)
    """
    symbol: str
    signal_type: str  # "BUY" or "SELL"
    price: float
    timestamp: datetime
    zlma_value: float
    ema_value: float
    confidence: float = 1.0
    
    def __post_init__(self):
        """Validate signal data after initialization."""
        if self.signal_type not in ["BUY", "SELL"]:
            raise ValueError(f"Invalid signal_type: {self.signal_type}. Must be 'BUY' or 'SELL'")
        
        if self.price <= 0:
            raise ValueError(f"Invalid price: {self.price}. Must be positive")
        
        if not 0.0 <= self.confidence <= 1.0:
            raise ValueError(f"Invalid confidence: {self.confidence}. Must be between 0.0 and 1.0")
    
    def to_dict(self) -> dict:
        """Convert signal to dictionary representation."""
        return {
            'symbol': self.symbol,
            'signal_type': self.signal_type,
            'price': self.price,
            'timestamp': self.timestamp.isoformat(),
            'zlma_value': self.zlma_value,
            'ema_value': self.ema_value,
            'confidence': self.confidence
        }